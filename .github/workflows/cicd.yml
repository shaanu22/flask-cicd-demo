name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-scan-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Run Tests
      run: pytest

    - name: Build Docker Image
      run: docker build -t flask-cicd-demo -f ./Dockerfile .

    - name: Security Scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'flask-cicd-demo'
        format: 'table'
        exit-code: '0'

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker Image
      run: |
        docker tag flask-cicd-demo ${{ secrets.DOCKERHUB_USERNAME }}/flask-cicd-demo:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-cicd-demo:latest

    - name: Test SSH Connection
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "‚úÖ Connected to EC2 successfully"
          whoami
          uname -a
          docker --version || echo "‚ö†Ô∏è Docker not installed on EC2"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "üöÄ Starting deployment on EC2..."

          # Ensure Docker is installed and running
          sudo systemctl start docker
          sudo systemctl enable docker

          # Secure Docker login
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # Pull latest Docker image
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/flask-cicd-demo:latest

          # Stop old container if exists
          sudo docker stop flask-cicd || true
          sudo docker rm flask-cicd || true

          # Mount persistent EBS volume
          sudo mkdir -p /mnt/data
          sudo mount /dev/xvdf /mnt/data || true

          # Run new container with persistent volume and restart policy
          sudo docker run -d -p 80:5000 --restart unless-stopped --name flask-cicd \
            -v /mnt/data:/app/data \
            ${{ secrets.DOCKERHUB_USERNAME }}/flask-cicd-demo:latest

          echo "‚úÖ Deployment finished successfully!"

    - name: Slack Notification Failure
      if: failure()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "üö® CI/CD Pipeline failed for ${{ github.repository }} on ${{ github.ref }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Slack Notification Success
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "‚úÖ CI/CD Pipeline succeeded for ${{ github.repository }} on ${{ github.ref }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}